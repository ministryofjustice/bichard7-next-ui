version: 2.1

orbs:
  node: circleci/node@5.1.0

commands:
  ################### Helpers
  setup:
    steps:
      - checkout
      - node_install
      - node/install-packages:
          include-branch-in-cache-key: true
      - run:
          name: Clone bichard7-next-core
          command: git clone --depth 1 https://github.com/ministryofjustice/bichard7-next-core.git ~/bichard7-next-core
      - run:
          name: Clone bichard7-next-audit-logging
          command: git clone --depth 1 https://github.com/ministryofjustice/bichard7-next-audit-logging.git ~/bichard7-next-audit-logging

  fetch_images:
    parameters:
      IMAGES:
        default: ""
        type: string
    steps:
      - run:
          name: "Fetch images: <<parameters.IMAGES>>"
          command: bash ./scripts/fetch-docker-images.sh <<parameters.IMAGES>>

  build_message_forwarder:
    steps:
      - run:
          name: Build message forwarder image
          working_directory: ~/bichard7-next-core
          command: docker compose -f environment/docker-compose.yml build message-forwarder

  build_audit_logging_images:
    steps:
      - run:
          name: Build audit logging images
          working_directory: ~/bichard7-next-audit-logging
          command: make build-api-server build-event-handler-server

  run_test_chunk:
    parameters:
      ARGS:
        default: ""
        type: "string"
    steps:
      - run:
          name: Run test chunk
          working_directory: ~/bichard7-next-tests
          command: |
            CHUNK=$(circleci tests glob "features/**/*.feature" | circleci tests split --split-by=timings) \
            <<parameters.ARGS>> \
            npm run test:chunk

  node_install:
    steps:
      - restore_cache:
          name: Restore nvm cache
          keys:
            # Invalidate the cache based on architecture, the version of Node defined in `nvmrc`
            - v1-nvm-cache-{{ arch }}-{{ checksum ".nvmrc" }}
      - run: nvm install
      - save_cache:
          name: Save nvm cache
          key: v1-nvm-cache-{{ arch }}-{{ checksum ".nvmrc" }}
          paths:
            - /opt/circleci/.nvm/.cache

  ################### Services
  start_bichard7_legacy:
    steps:
      - fetch_images:
          IMAGES: nodejs-20-2023
      - build_message_forwarder
      - build_audit_logging_images
      - run:
          name: Start bichard7 legacy
          working_directory: ~/bichard7-next-core
          command: SKIP_IMAGES=ui npm run all-legacy || npm run all-legacy

  start_services:
    parameters:
      ARGS:
        default: ""
        type: string
      SERVICES:
        default: ""
        type: string
      FLAGS:
        default: ""
        type: string
    steps:
      - run:
          name: "Run services: <<parameters.SERVICES>>"
          working_directory: ~/bichard7-next-core
          command: |
            <<parameters.ARGS>> docker compose --project-name bichard -f environment/docker-compose.yml \
            up -d <<parameters.SERVICES>> <<parameters.FLAGS>> --wait <<parameters.SERVICES>>

#################################################################################

jobs:

  build-ui:
    machine:
      image: ubuntu-2204:current
    resource_class: xlarge
    steps:
      - checkout
      - run: ./.circleci/scripts/build-ui.sh
      - run:
          name: Save Docker image
          command: |
            mkdir -p images
            docker image save -o "images/ui:latest" "ui:latest"
      - persist_to_workspace:
          root: .
          paths:
            - .
            - images

  lint:
    machine:
      image: ubuntu-2204:2023.07.2
    resource_class: xlarge
    steps:
      - checkout
      - node_install
      - node/install-packages:
          include-branch-in-cache-key: true
      - run:
          name: Check the code for linting errors
          command: npm run lint

  unit_test:
    machine:
      image: ubuntu-2204:2023.07.2
    resource_class: xlarge
    steps:
      - checkout
      - node_install
      - node/install-packages:
          include-branch-in-cache-key: true
      - run:
          name: Run code-based unit tests
          command: npm run test:unit

  cypress_component_test:
    machine:
      image: ubuntu-2204:2023.07.2
    resource_class: xlarge
    steps:
      - checkout
      - node_install
      - node/install-packages:
          include-branch-in-cache-key: true
      - run:
          name: Install Cypress
          command: ./.circleci/scripts/install-cypress.sh 2>&1
          background: true
      - run:
          name: Install GOV.UK Assets
          command: npm run install:assets
      - run:
          name: Wait for cypress install to finish
          command: until [ -f cypressInstalled ]; do sleep 1; done
          no_output_timeout: 10m
      - run:
          name: Retrying installing Cypress
          command: ./.circleci/scripts/install-cypress.sh
      - run:
          name: Run UI component tests
          command: npm run cypress:run:component:docker
          environment:
            UI_IS_HTTPS: true
            TZ: "Europe/London"
      - store_artifacts:
          path: ./cypress/videos
      - store_artifacts:
          path: ./cypress/screenshots

  integration_test:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true
    resource_class: xlarge
    steps:
      - setup
      - fetch_images:
          IMAGES: nodejs-20-2023
      - build_audit_logging_images
      - start_services:
          SERVICES: activemq localstack db-seed audit-log-api
      - run:
          name: Run integration tests
          command: npm run test:integration

  seed_data:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true
    resource_class: medium
    steps:
      - setup
      - fetch_images:
          IMAGES: nodejs-20-2023
      - build_audit_logging_images
      - start_services:
          SERVICES: db-seed audit-log-api localstack
      - run:
          name: Run the seed-data script
          command: DEPLOY_NAME=e2e-test npm run seed-data

  cypress_e2e_tests:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true
    resource_class: xlarge
    parallelism: 5
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Load image
          command: |
            docker image load < "images/ui:latest"
      - setup
      - run:
          command: ./.circleci/scripts/install-cypress.sh 2>&1
          background: true
      - run: npm run install:assets
      - fetch_images:
          IMAGES: nodejs-20-2023
      - build_audit_logging_images
      - run:
          name: Wait for cypress install to finish
          command: until [ -f cypressInstalled ]; do sleep 1; done
          no_output_timeout: 10m
      - run:
          name: Retrying installing Cypress
          command: ./.circleci/scripts/install-cypress.sh
      - fetch_images:
          IMAGES: user-service nginx-auth-proxy
      - run:
          command: npm run ui
          working_directory: ~/bichard7-next-core
      - run:
          name: Run fake conductor service
          command: node .circleci/fakes/conductor
          background: true
      - run:
          name: Run UI tests
          command: |
            TEST_FILES="$(circleci tests glob "cypress/e2e/**/*.cy.ts" | circleci tests split --split-by=timings)"
            npx cypress run --config baseUrl='https://localhost:4443' --spec ${TEST_FILES//$'\n'/','} --reporter cypress-circleci-reporter --reporter-options "resultsDir=./cypress/results"
          environment:
            UI_IS_HTTPS: true
            TZ: "Europe/London"
      - store_test_results:
          path: ./cypress/results
      - store_artifacts:
          path: ./cypress/videos
      - store_artifacts:
          path: ./cypress/screenshots

  cucumber_e2e_tests:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true
    resource_class: xlarge
    parallelism: 10
    environment:
      STACK_TYPE: next
      WORKSPACE: local-next
      AUTH_TYPE: user-service
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Load image
          command: |
            docker image load < "images/ui:latest"
      - setup
      - run:
          name: Clone bichard7-next-tests
          command: git clone --depth 1 https://github.com/ministryofjustice/bichard7-next-tests.git ~/bichard7-next-tests
      - node/install-packages:
          app-dir: ~/bichard7-next-tests
          cache-path: ~/bichard7-next-tests/node_modules
          include-branch-in-cache-key: true
      - start_bichard7_legacy
      - run_test_chunk:
          ARGS: >-
            NEXTUI="true"
            MESSAGE_ENTRY_POINT="mq"
      - store_test_results:
          path: ./cucumber/results

  zap_scanner:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true
    resource_class: xlarge
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Load image
          command: |
            docker image load < "images/ui:latest"
      - setup
      - fetch_images:
          IMAGES: nodejs-20-2023
      - build_audit_logging_images
      - fetch_images:
          IMAGES: user-service nginx-auth-proxy
      - run:
          command: npm run ui
          working_directory: ~/bichard7-next-core
      - run:
          name: Seed database
          command: DEPLOY_NAME=e2e-test npm run seed-data
      - run:
          name: Run ZAP scanner
          command: npm run zap

#################################################################################

workflows:
  build-and-test:
    jobs:
      - build-ui

      - lint
      - unit_test
      - integration_test
      - cypress_component_test
      - seed_data

      - cypress_e2e_tests:
          requires:
            - build-ui
      - cucumber_e2e_tests:
          requires:
            - build-ui
      - zap_scanner:
          requires:
            - build-ui
